openapi: "3.0.0"
info:
  title: "COLOR-AGENT-SERVER"
  version: "1.0"
  description: "API DOC"
servers:
  - url: https://localhost:8080/v1
tags:
  - name: opts
    description: 運用監視関連のAPI
  - name: auth
    description: ユーザー管理
  - name: presentation
    description: プレゼンテーション
paths:
  /health:
    get:
      tags:
        - opts
      operationId: checkHealth
      responses:
        '200':
          description: OK
  /user/{id}:
    get:
      tags:
        - auth
      operationId: getUserContext
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: CHECKED SUCCESS
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContextEntity"
  /user/{id}/context:
    post:
      tags:
        - auth
      operationId: updateUserContext
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userContext
              properties:
                userContext:
                  type: string
      responses:
        '200':
          description: CHECKED SUCCESS
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContextEntity"
  /user/{id}/totaltokens:
    post:
      tags:
        - auth
      operationId: updateTotalTokens
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - totalTokens
              properties:
                totalTokens:
                  type: integer
                  format: int64
      responses:
        '200':
          description: CHECKED SUCCESS
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContextEntity"
  /auth:
    get:
      tags:
        - opts
      operationId: checkAuth
      responses:
        '200':
          description: CHECKED SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
  /auth/logout:
    post:
      tags:
        - auth
      operationId: logout
      responses:
        '200':
          description: LOGOUT SUCCESS
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserForm"
      responses:
        '200':
          description: LOGIN SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: UserNotFoundError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"


components:
  schemas:
    UserContextEntity:
      type: object
      description: ユーザの情報
      required:
        - id
        - userContext
        - totalTokens
      properties:
        id:
          type: integer
          format: int64
          description: "id"
          example: 123
        userContext:
          type: string
          description: "ユーザの情報"
          minLength: 1
          maxLength: 255
          example: 足が速いです
        totalTokens:
          type: integer
          format: int64
          description: "使用済みのtoken数"
          maxLength: 100000
          example: 12

    Persona:
      type: object
      description: ペルソナの情報
      required:
        - name
        - background
      properties:
        name:
          type: string
          description: "ペルソナの名前"
          minLength: 1
          maxLength: 30
          example: 田中　ゆうこ
        background:
          type: string
          description: "ペルソナの背景"
          minLength: 1
          maxLength: 400
          example: 23歳です。
    PresentationContent:
      type: object
      title: PresentationContent
      required:
        - contentName
        - contentPurpose
        - contentDetail
        - contentTime
      properties:
        contentName:
          type: string
          description: プレゼンテーションのコンテンツ名
        contentPurpose:
          type: string
          description: プレゼンテーションのコンテンツの目的
        contentDetail:
          type: string
          description: プレゼンテーションのコンテンツの詳細
        contentTime:
          type: integer
          description: プレゼンテーションのコンテンツの時間
    InterviewContent:
      type: object
      title: InterviewContent
      required:
        - persona
        - question
        - answer
      properties:
        persona:
          $ref: '#/components/schemas/Persona'
          description: インタビュー対象のペルソナ
        question:
          type: string
          description: インタビューの質問
        answer:
          type: string
          description: インタビューの回答

    Presentation:
      type: object
      title: Presentation
      required:
        - title
        - contents
      properties:
        title:
          type: string
          description: プレゼンテーションのタイトル
        contents:
          type: array
          description: プレゼンテーションのコンテンツのリスト
          items:
            $ref: '#/components/schemas/PresentationContent'
    InterviewState:
      type: object
      title: InterviewState
      required:
        - thread_id
        - user_request
      properties:
        thread_id:
          type: string
          description: リクエストのID
        user_request:
          type: string
          description: ユーザーのリクエスト
        persona_list:
          type: array
          description: ペルソナのリスト
          items:
            $ref: '#/components/schemas/Persona'
        persona_confirmed:
          type: boolean
          default: false
          description: ペルソナのユーザによる確認
        interview_result:
          type: array
          description: 実施されたインタビューのリスト
          items:
            $ref: '#/components/schemas/InterviewContent'
        iteration:
          type: integer
          default: 0
          description: ペルソナ生成とインタビューの反復回数
        is_satisfied:
          type: boolean
          default: false
          description: 情報が充分かどうか
        presentation:
          description: プレゼンテーションのコンテンツ
          $ref: '#/components/schemas/Presentation'
    LoginUserForm:
      description: ログイン時のユーザー情報
      properties:
        email:
          type: string
          description: "ログインEmail"
          minLength: 1
          maxLength: 100
          example: sample@test.com
        password:
          type: string
          minLength: 1
          maxLength: 100
          example: sample@test.com
          description: "パスワード"
      required:
        - email
        - password
    UserResponseDTO:
      description: ログイン時の結果情報
      properties:
        userID:
          type: integer
          format: int64
          description: "ユーザーID"
        role:
          type: array
          items:
            type: string
          description: "ROLE"
        email:
          type: string
          description: "ログインEmail"
          minLength: 1
          maxLength: 100
          example: sample@test.com
      required:
        - userID
        - role
        - email
    ForbiddenError:
      description: アクセス権限がありません
      type: object
      properties:
        title:
          type: string
          description: "エラーのタイプ"
          default: "パスワードが違います"
        detail:
          type: string
          description: "エラーの詳細"
      required:
        - title
        - detail
    ResourceNotFoundError:
      description: 指定したリソースは存在しない
      type: object
      properties:
        title:
          type: string
          description: "エラーのタイプ"
          default: "Resource Not Found"
        detail:
          type: string
          description: "エラーの詳細"
      required:
        - title
        - detail
    BadRequestError:
      description: 不正リクエスト
      type: object
      properties:
        title:
          type: string
          description: エラータイトル
          default: "BadRequest"
        detail:
          type: string
          description: ""
          default: "リクエストが不正です。再度リクエストを送信してください"
        invalid-params:
          type: array
          items:
            $ref: "#/components/schemas/InvalidParam"
    InvalidParam:
      description: "不正リクエストについての詳細"
      type: object
      properties:
        name:
          type: string
          description: エラーが発生したフィールド名
        reason:
          type: string
          description: エラーの理由
      required:
        - name
        - reason
